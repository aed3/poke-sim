name: Build & Test

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/build-and-test.yml'
      - 'external/**'
      - 'include/**'
      - 'src/**'
      - 'tests/**'
      - 'tools/createSingleHeaderFile.js'
      - 'CMakeLists.txt'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-and-test.yml'
      - 'external/**'
      - 'include/**'
      - 'src/**'
      - 'tests/**'
      - 'tools/createSingleHeaderFile.js'
      - 'CMakeLists.txt'

jobs:
  linux:
    name: 'Linux: ${{matrix.cxx}}, SHF ${{matrix.use_single_header}}, ${{matrix.build_type}}'
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        cxx:
          - g++-9
          - g++-10
          - g++-11
          - g++-12
          - clang++-9
          - clang++-10
          - clang++-11
          - clang++-12
          - clang++-13
          - clang++-14
          - clang++-15
          - clang++-16
        build_type: [Debug, Release]
        use_single_header: [ON, OFF]
        include:
          - cxx: g++-9
            other_pkgs: g++-9
            os: ubuntu-20.04
          - cxx: g++-10
            other_pkgs: g++-10
            os: ubuntu-20.04
          - cxx: g++-11
            other_pkgs: g++-11
            os: ubuntu-20.04
          - cxx: g++-12
            other_pkgs: g++-12
            os: ubuntu-22.04
          - cxx: clang++-9
            os: ubuntu-20.04
          - cxx: clang++-10
            os: ubuntu-20.04
          - cxx: clang++-11
            os: ubuntu-20.04
          - cxx: clang++-12
            os: ubuntu-20.04
          - cxx: clang++-13
            os: ubuntu-22.04
          - cxx: clang++-14
            os: ubuntu-22.04
          - cxx: clang++-15
            os: ubuntu-22.04
          - cxx: clang++-16
            os: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add Clang Upstream
        if: ${{ startsWith(matrix.cxx, 'clang') }}
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          clang_version="${{matrix.cxx}}"
          version_number=${clang_version#*-}

          codename=`lsb_release -sc`
          sudo apt-add-repository --yes --update "deb http://apt.llvm.org/$codename/ llvm-toolchain-$codename-$version_number main"
          sudo apt install -y --no-install-recommends clang-$version_number

      - name: Prepare environment
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends ninja-build ${{matrix.other_pkgs}}

      - name: Create Single Header File
        uses: ./.github/actions/create-headers

      - name: Configure build
        working-directory: ${{runner.workspace}}
        env:
          CXX: ${{matrix.cxx}}
        run: |
          cmake -Bbuild -H$GITHUB_WORKSPACE \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DUSE_SINGLE_HEADER_FILE=${{matrix.use_single_header}} \
                -DCMAKE_RUNTIME_OUTPUT_DIRECTORY:FILEPATH=${{runner.workspace}}/build/bin \
                -G Ninja

      - name: Build tests + lib
        working-directory: ${{runner.workspace}}/build
        run: ninja

      - name: Run tests
        working-directory: ${{runner.workspace}}/build
        run: bin/PokeSimTests
  windows:
    name: '${{matrix.os}}: SHF ${{matrix.use_single_header}}, ${{matrix.platform}} ${{matrix.build_type}}'
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, windows-2022]
        platform: [Win32, x64]
        build_type: [Debug, Release]
        use_single_header: [ON, OFF]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Single Header File
        uses: ./.github/actions/create-headers
      
      - name: Configure build
        working-directory: ${{runner.workspace}}
        run: |
          cmake -S $Env:GITHUB_WORKSPACE                               `
                -B ${{runner.workspace}}\build                         `
                -DUSE_SINGLE_HEADER_FILE=${{matrix.use_single_header}} `
                -A ${{matrix.platform}}
      
      - name: Build tests
        working-directory: ${{runner.workspace}}
        run: |
          $jobs = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
          cmake --build build --config ${{matrix.build_type}} --parallel $jobs

      - name: Run tests
        working-directory: ${{runner.workspace}}/build
        run: bin\${{matrix.build_type}}\PokeSimTests.exe
  mac:
    name: 'Mac OS: ${{matrix.cxx}}, SHF ${{matrix.use_single_header}}, ${{matrix.build_type}}'
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        cxx:
          - g++-11
          - g++-12
          - clang++
        build_type: [Debug, Release]
        use_single_header: [ON, OFF]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Single Header File
        uses: ./.github/actions/create-headers

      - name: Configure build
        working-directory: ${{runner.workspace}}
        env:
          CXX: ${{matrix.cxx}}
        run: |
          cmake -Bbuild -H$GITHUB_WORKSPACE \
                -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                -DUSE_SINGLE_HEADER_FILE=${{matrix.use_single_header}} \
                -DCMAKE_RUNTIME_OUTPUT_DIRECTORY:FILEPATH=${{runner.workspace}}/build/bin \

      - name: Build tests
        working-directory: ${{runner.workspace}}/build
        run: make -j 2

      - name: Run tests
        working-directory: ${{runner.workspace}}/build
        run: bin/PokeSimTests
